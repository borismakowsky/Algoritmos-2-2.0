------------------------MATRIZ.H-------------------------------------
#include "stdafx.h"
#include <iostream>
#include "conio.h"

using namespace std;

class matriz
{
private:
	int fil;
	int col;
	int m[50][50];
public:
	matriz()
	{
		fil=col=0;
	}
	void setFil(int f)
	{
		fil=f;
	}
	void setCol(int c)
	{
		col=c;
	}
	void setMat(int x,int f,int c)
	{
		m[f][c]=x;
	}
	int getFil()
	{
		return fil;
	}
	int getCol()
	{
		return col;
	}
	int getMat(int f,int c)
	{
		return m[f][c];
	}
	void leer();
	void mostrar();
};
void matriz::leer()
{
	int i,j,x,f,c;
	cout<<"Ingrese el numero de filas"<<endl;
	cin>>f;
	setFil(f);
	cout<<"Ingrese el numero de columnas"<<endl;
	cin>>c;
	setCol(c);

	for(i=0;i<fil;i++)
	{
		for(j=0;j<col;j++)
		{
			cout<<"mat["<<i<<"]["<<j<<"]=";
			cin>>x;
			setMat(x,i,j);
		}
	}
}
void matriz::mostrar()
{
	for(int i=0;i<fil;i++)
	{
		for(int j=0;j<col;j++)
		{
				cout<<getMat(i,j)<<"\t";
		}
		cout<<endl;

	}
}

--------------------------OPERACIONES.CPP--------------------------------

#include "stdafx.h"
#include <iostream>
#include "conio.h"
#include "matriz.h"

using namespace std;

class sumar : public matriz
{
public:
	void sumaa(matriz m1,matriz m2);
	void transpuesta(matriz m2);
	void multiplicar(matriz m1,matriz m2);
	void fibo();
};
void sumar::sumaa(matriz m1,matriz m2)
{
	if(m1.getFil()==m2.getFil() && m1.getCol()==m2.getCol())
	{

		setFil(m1.getFil());
		setCol(m1.getCol());

		for(int i=0;i<getFil();i++)
		{
			for(int j=0;j<getCol();j++)
			{
				setMat(m1.getMat(i,j)+m2.getMat(i,j),i,j);
			}
		}
	}
	else
		cout<<"NO SE PUEDE SUMAR "<<endl;
}
void sumar::transpuesta(matriz m2)
{
	setFil(m2.getCol());
	setCol(m2.getFil());
	for(int i=0;i<getFil();i++)
	{
		for(int j=0;j<getCol();j++)
		{
			setMat(m2.getMat(j,i),i,j);
		}
		cout<<endl;
	}

}
void sumar::multiplicar(matriz m1,matriz m2)
{
	int mul=0;
	if(m1.getCol()==m2.getFil())
	{
		setFil(m1.getCol());
		setCol(m2.getFil());
		for(int i=0;i<getFil();i++)
		{
			for(int j=0;j<getCol();j++)
			{
				mul=0;
				for(int k=0;k<m2.getFil();k++)
				{
					mul=mul+ m1.getMat(i,k)*m2.getMat(k,j);
				}
				setMat(mul,i,j);
			}
			cout<<endl;
		}
	}
}
int fibonacci(int pos)
{
	int a=1,b=1,c;
	if(pos==1)
		return 1;
	else
	{
		if(pos==2)
		{
			return 1;
		}
		else
		{
			if(pos>=3)
			{
				for(int i=2;i<pos;i++)
				{
					c=a+b;
					a=b;
					b=c;
				}
				return c;
			}
		}
	}
}

		void sumar::fibo()
{
	int i,j,x,f,c,tam,n;
	cout<<"Ingrese el numero de filas"<<endl;
	cin>>f;
	setFil(f);
	cout<<"Ingrese el numero de columnas"<<endl;
	cin>>c;
	setCol(c);
	tam=f*c;
	n=1;
	do
	{
	for(int i=0;i<getFil();i++)
		{
			for(int j=0;j<getCol();j++)
			{
				setMat(fibonacci(n),i,j);
				n++;
			}
		}
	}while(tam>n);
}


void main()
{
	sumar m1,m2,m3;
	m1.fibo();
	cout<<endl;
	m1.mostrar();



	getch();
	
}

